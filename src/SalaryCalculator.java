
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gulbe
 */
public class SalaryCalculator extends javax.swing.JFrame {
    
    DefaultTableModel infoofPersonnel;
    DefaultTableModel infoofWorkHour;
    public static ArrayList<String> partya = new ArrayList<>();
    
    /**
     * Creates new form SalaryCalculator
     */
    public SalaryCalculator() {
        initComponents();
        infoofPersonnel = (DefaultTableModel)TablePers.getModel();
        infoofWorkHour = (DefaultTableModel)TableMont.getModel();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelOutput = new javax.swing.JPanel();
        LabelOutput = new javax.swing.JLabel();
        LabelSalary = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtsalary = new javax.swing.JTextArea();
        jPanelInput = new javax.swing.JPanel();
        LabelInput = new javax.swing.JLabel();
        LabelPersonnel = new javax.swing.JLabel();
        LabelMonitoring = new javax.swing.JLabel();
        jButtonAddPers = new javax.swing.JButton();
        jButtonDeletePers = new javax.swing.JButton();
        jButtonAddMon = new javax.swing.JButton();
        jButtonDeleteMon = new javax.swing.JButton();
        jButtonExecute = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablePers = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableMont = new javax.swing.JTable();
        ButtonSavePM = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 0, 204));

        jPanelOutput.setBackground(new java.awt.Color(204, 204, 255));

        LabelOutput.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        LabelOutput.setForeground(new java.awt.Color(51, 0, 51));
        LabelOutput.setText("OUTPUT");

        LabelSalary.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LabelSalary.setForeground(new java.awt.Color(51, 0, 51));
        LabelSalary.setText("Salary");

        txtsalary.setColumns(20);
        txtsalary.setRows(5);
        jScrollPane3.setViewportView(txtsalary);

        javax.swing.GroupLayout jPanelOutputLayout = new javax.swing.GroupLayout(jPanelOutput);
        jPanelOutput.setLayout(jPanelOutputLayout);
        jPanelOutputLayout.setHorizontalGroup(
            jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOutputLayout.createSequentialGroup()
                        .addComponent(LabelSalary)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelOutputLayout.createSequentialGroup()
                        .addGroup(jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                            .addGroup(jPanelOutputLayout.createSequentialGroup()
                                .addComponent(LabelOutput)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanelOutputLayout.setVerticalGroup(
            jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOutputLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(LabelOutput)
                .addGap(33, 33, 33)
                .addComponent(LabelSalary)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );

        jPanelInput.setBackground(new java.awt.Color(204, 204, 255));

        LabelInput.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        LabelInput.setForeground(new java.awt.Color(51, 0, 51));
        LabelInput.setText("INPUT");

        LabelPersonnel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LabelPersonnel.setForeground(new java.awt.Color(51, 0, 51));
        LabelPersonnel.setText("Personnel");

        LabelMonitoring.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        LabelMonitoring.setForeground(new java.awt.Color(51, 0, 51));
        LabelMonitoring.setText("Monitoring");

        jButtonAddPers.setBackground(new java.awt.Color(243, 218, 218));
        jButtonAddPers.setText("Add Personnel");
        jButtonAddPers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPersActionPerformed(evt);
            }
        });

        jButtonDeletePers.setBackground(new java.awt.Color(243, 218, 218));
        jButtonDeletePers.setText("Delete Personnel");
        jButtonDeletePers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePersActionPerformed(evt);
            }
        });

        jButtonAddMon.setBackground(new java.awt.Color(243, 218, 218));
        jButtonAddMon.setText("Add Monitoring");
        jButtonAddMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddMonActionPerformed(evt);
            }
        });

        jButtonDeleteMon.setBackground(new java.awt.Color(243, 218, 218));
        jButtonDeleteMon.setText("Delete Monitoring");
        jButtonDeleteMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteMonActionPerformed(evt);
            }
        });

        jButtonExecute.setBackground(new java.awt.Color(255, 232, 245));
        jButtonExecute.setText("Execute");
        jButtonExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecuteActionPerformed(evt);
            }
        });

        TablePers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Surname", "Register Number", "Position", "YearOfStart"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(TablePers);

        TableMont.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Register Number", "1.week", "2.week", "3.week", "4.week"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(TableMont);

        ButtonSavePM.setBackground(new java.awt.Color(255, 232, 245));
        ButtonSavePM.setText("SAVE");
        ButtonSavePM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSavePMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelInputLayout = new javax.swing.GroupLayout(jPanelInput);
        jPanelInput.setLayout(jPanelInputLayout);
        jPanelInputLayout.setHorizontalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonAddPers, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeletePers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonDeleteMon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAddMon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(77, 77, 77))
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelInput)
                            .addComponent(LabelPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(214, 214, 214)
                        .addComponent(LabelMonitoring, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(ButtonSavePM, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jButtonExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelInputLayout.setVerticalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(LabelInput)
                .addGap(34, 34, 34)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelMonitoring, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddPers, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddMon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeletePers)
                    .addComponent(jButtonDeleteMon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonSavePM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddPersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPersActionPerformed
        AddPersonnel tempF = new AddPersonnel(infoofPersonnel);
        tempF.setVisible(true);
        tempF.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jButtonAddPersActionPerformed

    private void jButtonDeletePersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePersActionPerformed
        int selectedPersonnel = TablePers.getSelectedRow();
        if (selectedPersonnel != -1) {
            Personnel.personnelList.remove(selectedPersonnel);
             infoofPersonnel.removeRow(selectedPersonnel);
        } else {
            JOptionPane.showMessageDialog(this, "No Row is selected!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDeletePersActionPerformed

    private void jButtonAddMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddMonActionPerformed
        Monitoring tempFr = new Monitoring(infoofWorkHour);
        tempFr.setVisible(true);
        tempFr.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jButtonAddMonActionPerformed

    private void jButtonExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteActionPerformed
      
        try {
            /*
            txtsalary.setText("");
            for (int j=0 ;j<TablePers.getRowCount();j++){
            for (int i = 0; i < Personnel.personnelList.size(); i++) {
            txtsalary.setText("Name: " +String.valueOf(Personnel.personnelList.get(i).getName()+"\n"
            +"Surname: "+Personnel.personnelList.get(i).getSurname()+"\n"
            +"Register Number: "+Personnel.personnelList.get(i).getRegisterNumber()+"\n"
            +"Position: "+Personnel.personnelList.get(i).getPosition()+"\n"
            +"Year Of Start: " +Personnel.personnelList.get(i).getYearOfStart()+"\n"));
            }
            }*/
            /*
            for(int i = 0; i < Personnel.personnelList.size(); i++){
            if (AddPersonnel.ComboBoxPos.getSelectedItem().equals("FacultyMembers") ){
            Personnel Academisyen = new FacultyMembers(Personnel.personnelList.get(i).getPosition());
            }
            }
            //*/
            readFile(partya, "informationOfPersonnel.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SalaryCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                for (String a: partya) {
  
                txtsalary.setText(String.valueOf((partya)));
}/*
}/*
        File saveFile2 = new File("informationofPersonnel.txt");
        if (!saveFile2.exists()) {
            try {
                saveFile2.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error while creating file!", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        
     try {
           FileReader reader= new FileReader(saveFile2);
           
            reader.close();
             } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error while creating file!", "Error!", JOptionPane.ERROR_MESSAGE);

        }

                                              
  
       
        
        /*if (reader.exists()) {
        
        for (int i = 0; i < Personnel.personnelList.size(); i++) {
        txtsalary.setText("Name: " +String.valueOf(Personnel.personnelList.get(i).getName()+"\n"
        +"Surname: "+Personnel.personnelList.get(i).getSurname()+"\n"
        +"Register Number: "+Personnel.personnelList.get(i).getRegisterNumber()+"\n"
        +"Position: "+Personnel.personnelList.get(i).getPosition()+"\n"
        +"Year Of Start: " +Personnel.personnelList.get(i).getYearOfStart()+"\n"));
        }
        
        }else {
        txtsalary.setText("The file does not exist.");
        }
        */
        /*
        /*
        
        switch(ComboBoxPos.getSelectedIndex()){
        case 0:
        int addCourseFee=0;
        if((40< Integer.parseInt(Monitor.MonitoringList.get(0).getFirstWeek()))&&(Integer.parseInt(Monitor.MonitoringList.get(0).getFirstWeek()))<=48){
        addCourseFee = (Integer.parseInt(Monitor.MonitoringList.get(0).getFirstWeek()) - 40)*20;
        }
        else if(48 < Integer.parseInt(Monitor.MonitoringList.get(0).getFirstWeek())){
        addCourseFee= 8*20;
        }
        else{
        addCourseFee=0;
        }
        
        
        if(40 <Integer.parseInt(Monitor.MonitoringList.get(0).getSecondWeek())&&(Integer.parseInt(Monitor.MonitoringList.get(0).getSecondWeek()))<=48){
        addCourseFee = (Integer.parseInt(Monitor.MonitoringList.get(0).getSecondWeek()) - 40)*20;
        }
        else if(48 < (Integer.parseInt(Monitor.MonitoringList.get(0).getSecondWeek()))){
        addCourseFee= 8*20;
        }
        else{
        addCourseFee=0;
        }
        
        
        if(40 < Integer.parseInt(Monitor.MonitoringList.get(0).getThirdWeek())&&(Integer.parseInt(Monitor.MonitoringList.get(0).getThirdWeek()))<=48){
        addCourseFee = (Integer.parseInt(Monitor.MonitoringList.get(0).getThirdWeek()) - 40)*20;
        }
        else if(48 < (Integer.parseInt(Monitor.MonitoringList.get(0).getFirstWeek()))){
        addCourseFee= 8*20;
        }
        else{
        addCourseFee=0;
        }
        
        
        if(40 < Integer.parseInt(Monitor.MonitoringList.get(0).getFourthWeek())&&(Integer.parseInt(Monitor.MonitoringList.get(0).getFourthWeek()))<=48){
        addCourseFee = (Integer.parseInt(Monitor.MonitoringList.get(0).getFourthWeek()) - 40)*20;
        }
        else if(48 < Integer.parseInt(Monitor.MonitoringList.get(0).getFourthWeek())){
        addCourseFee= 8*20;
        }
        else{
        addCourseFee=0;
        }
     }*/
  // TODO add your handling code here:
    }//GEN-LAST:event_jButtonExecuteActionPerformed

    private void jButtonDeleteMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteMonActionPerformed
        int selectedMonitor = TableMont.getSelectedRow();
        if (selectedMonitor != -1) {
            Monitor.MonitoringList.remove(selectedMonitor);
            infoofWorkHour.removeRow(selectedMonitor);
        } else {
            JOptionPane.showMessageDialog(this, "No Row is selected!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
             
    }//GEN-LAST:event_jButtonDeleteMonActionPerformed

    private void ButtonSavePMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSavePMActionPerformed

        File saveFile = new File("PayrollOfPersonnel.txt");
        if (!saveFile.exists()) {
            try {
                saveFile.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error while creating file!", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        try {   
           FileWriter writer= new FileWriter(saveFile,true);
            for (int i = 0; i < Personnel.personnelList.size(); i++) {
                writer.append(Personnel.personnelList.get(i).getName()+"\t"
                        +Personnel.personnelList.get(i).getSurname()+"\t"
                        +Personnel.personnelList.get(i).getRegisterNumber()+"\t"
                        +Personnel.personnelList.get(i).getPosition()+"\t"
                        +Personnel.personnelList.get(i).getYearOfStart()+"\n");
            
            }
                writer.write(" ***MONITORING VALUES OF PERSONNEL***\n");
            for (int j = 0; j< Monitor.MonitoringList.size(); j++) {
                writer.append( Monitor.MonitoringList.get(j).getRegisterNumber()+"\t"
                        +Monitor.MonitoringList.get(j).getFirstWeek()+"\t"
                        +Monitor.MonitoringList.get(j).getSecondWeek()+"\t"
                        +Monitor.MonitoringList.get(j).getThirdWeek()+"\t"
                        +Monitor.MonitoringList.get(j).getFourthWeek()+"\n");
            }
                 writer.close();
            } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error while creating file!", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        
        
        File saveFile2 = new File("informationofPersonnel.txt");
        if (!saveFile2.exists()) {
            try {
                saveFile2.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error while creating file!", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        try {
           FileWriter writer2= new FileWriter(saveFile2,true);
            for (int i = 0; i < Personnel.personnelList.size(); i++) {
                writer2.append("\n NAME: "+Personnel.personnelList.get(i).getName()+"\n"
                        +"SURNAME: "+Personnel.personnelList.get(i).getSurname()+"\n"
                        +"REGİSTER NUMBER: "+Personnel.personnelList.get(i).getRegisterNumber()+"\n"
                        +"POSITION: "+Personnel.personnelList.get(i).getPosition()+"\n"
                        +"YEAR OF START: "+Personnel.personnelList.get(i).getYearOfStart()+"\n");
            
            }
            
            writer2.close();
             } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error while creating file!", "Error!", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_ButtonSavePMActionPerformed
  private void readFile(ArrayList<String> partya, String informationOfPersonneltxt) throws FileNotFoundException {
        List<String> partyaList = new ArrayList<>(1000);
        Scanner fileInput = new Scanner(new File(informationOfPersonneltxt));
        while (fileInput.hasNextLine()) {
            partyaList.add(("\n")+fileInput.nextLine());
        }
        partya.addAll(partyaList);
    }
    /**
     * @param args the command line arguments
     */
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalaryCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalaryCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonSavePM;
    private javax.swing.JLabel LabelInput;
    private javax.swing.JLabel LabelMonitoring;
    private javax.swing.JLabel LabelOutput;
    private javax.swing.JLabel LabelPersonnel;
    private javax.swing.JLabel LabelSalary;
    private javax.swing.JTable TableMont;
    private javax.swing.JTable TablePers;
    private javax.swing.JButton jButtonAddMon;
    private javax.swing.JButton jButtonAddPers;
    private javax.swing.JButton jButtonDeleteMon;
    private javax.swing.JButton jButtonDeletePers;
    private javax.swing.JButton jButtonExecute;
    private javax.swing.JPanel jPanelInput;
    private javax.swing.JPanel jPanelOutput;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea txtsalary;
    // End of variables declaration//GEN-END:variables

    
}
